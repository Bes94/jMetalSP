package org.uma.jmetalsp.examples.dynamictsp;/** * Example of SparkSP application. * Features: * - Algorithm: to choose among NSGA-II and MOCell * - Problem: Bi-objective TSP * - Default streaming runtime (Spark is not used) * * @author Antonio J. Nebro <antonio@lcc.uma.es> */public class DynamicTSPApplicationWithCharts {/*  public static void main(String[] args) throws IOException, InterruptedException {    JMetalSPApplication<            MatrixObservedData<Double>,            AlgorithmObservedData,            DynamicProblem<DoubleSolution, MatrixObservedData<Double>>,            DynamicAlgorithm<List<PermutationSolution<Integer>>, Observable<AlgorithmObservedData>>,            StreamingTSPSource,            AlgorithmDataConsumer<AlgorithmObservedData, DynamicAlgorithm<List<PermutationSolution<Integer>>, Observable<AlgorithmObservedData>>>> application;    application = new JMetalSPApplication<>();    // Set the streaming data source    Observable<MatrixObservedData<Double>> streamingTSPDataObservable =            new DefaultObservable<>("streamingTSPObservable") ;    StreamingDataSource<?, ?> streamingDataSource = new StreamingTSPSource(streamingTSPDataObservable, 20000) ;	  // Problem configuration    DynamicProblem<PermutationSolution<Integer>, MatrixObservedData<Double>> problem ;    //problem = new MultiobjectiveTSPBuilderFromTSPLIBFiles("kroA100.tsp", "kroB100.tsp")    //        .build(streamingTSPDataObservable);    problem = new MultiobjectiveTSPBuilderFromNY("initialDataFile.txt")            .build(streamingTSPDataObservable);    System.out.println(problem);	  // Algorithm configuration    CrossoverOperator<PermutationSolution<Integer>> crossover;    MutationOperator<PermutationSolution<Integer>> mutation;    SelectionOperator<List<PermutationSolution<Integer>>, PermutationSolution<Integer>> selection;    crossover = new PMXCrossover(0.9) ;    double mutationProbability = 0.2 ;    mutation = new PermutationSwapMutation<Integer>(mutationProbability) ;    selection = new BinaryTournamentSelection<>(            new RankingAndCrowdingDistanceComparator<PermutationSolution<Integer>>());    String defaultAlgorithm = "NSGAII";    DynamicAlgorithm<List<PermutationSolution<Integer>>, Observable<AlgorithmObservedData>> algorithm;    Observable<AlgorithmObservedData> algorithmObservable = new DefaultObservable<>("") ;    switch (defaultAlgorithm) {      case "NSGAII":        algorithm = new DynamicNSGAIIBuilder<>(crossover, mutation, algorithmObservable)                .setSelectionOperator(selection)                .setMaxEvaluations(300000)                .setPopulationSize(50)                .build(problem);        break;      case "MOCell":        algorithm = new DynamicMOCellBuilder<>(crossover, mutation, algorithmObservable)                .setMaxEvaluations(100000)                .setPopulationSize(100)                .build(problem);        break;      default:        algorithm = null;    }    List<Double> referencePoint = new ArrayList<>();    referencePoint.add(190000.0);    referencePoint.add(12000.0);    application.setStreamingRuntime(            new DefaultRuntime<MatrixObservedData<Double>,                    Observable<MatrixObservedData<Double>>,                    StreamingTSPSource>())            .setProblem(problem)            .setAlgorithm(algorithm)            .addStreamingDataSource(streamingDataSource)            .addAlgorithmDataConsumer(new ChartInDM2Consumer(algorithm, referencePoint))            .addAlgorithmDataConsumer(new LocalDirectoryOutputConsumer("outputDirectory", algorithm))            .run();  }  */}